package org.opendatakit.briefcase.delivery.cli.launchgui;

import static java.awt.event.KeyEvent.VK_ESCAPE;
import static javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
import static javax.swing.KeyStroke.getKeyStroke;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.Set;
import java.util.function.Consumer;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import org.opendatakit.briefcase.delivery.ui.reused.events.WindowAdapterBuilder;
import org.opendatakit.briefcase.delivery.ui.reused.filsystem.FileChooser;
import org.opendatakit.briefcase.reused.Workspace;

public class WorkspaceLocationDialogForm extends JDialog {
  private JPanel contentPane;
  private JPanel mainPane;
  private JPanel actionPane;
  private JButton startButton;
  private JTextField locationField;
  private JComboBox<String> savedLocationSelect;
  private JPanel workspaceFieldActionsPane;
  private JButton locationChooseButton;
  private JButton locationClearButton;
  private JLabel savedLocationLabel;
  private JLabel locationFieldLabel;
  private JButton exitButton;
  private JLabel infoLabel;
  private JLabel tipLabel;
  private Optional<Path> workspaceLocation = Optional.empty();

  public WorkspaceLocationDialogForm(Workspace workspace, Consumer<Optional<Path>> startCallback) {
    $$$setupUI$$$();

    setSavedLocationOptions(workspace);

    locationChooseButton.addActionListener(__ -> FileChooser
        .directory(contentPane, Optional.empty())
        .choose()
        .ifPresent(file -> {
          workspaceLocation = Optional.of(file.toPath());
          locationField.setText(workspaceLocation.get().toString());
          showTip();
          updateButtons();
        }));

    locationClearButton.addActionListener(__ -> {
      workspaceLocation = Optional.empty();
      locationField.setText("");
      hideTip();
      updateButtons();
    });

    savedLocationSelect.addActionListener(__ -> {
      workspaceLocation = Optional.ofNullable((String) savedLocationSelect.getSelectedItem())
          .filter(value -> !value.equals("Select a saved location"))
          .map(Paths::get);
      if (workspaceLocation.isPresent())
        showTip();
      else
        hideTip();
      updateButtons();
    });

    startButton.addActionListener(__ -> {
      startCallback.accept(workspaceLocation);
      dispose();
    });

    exitButton.addActionListener(__ -> exit());

    setContentPane(contentPane);
    setModal(true);
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    addWindowListener(new WindowAdapterBuilder().onClosing(e -> exit()).build());
    contentPane.registerKeyboardAction(e -> exit(), getKeyStroke(VK_ESCAPE, 0), WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }

  private void showTip() {
    tipLabel.setText("<html><div style='text-align: center;'>You can skip this by adding -wl " + workspaceLocation.orElseThrow().toString() + "<br/>when launching Briefcase again</div></html>");
    tipLabel.setVisible(true);
    pack();
  }

  private void hideTip() {
    tipLabel.setText("");
    tipLabel.setVisible(false);
    pack();
  }

  private void setSavedLocationOptions(Workspace workspace) {
    Set<Path> savedLocations = workspace.getSavedWorkspaces();
    savedLocationSelect.addItem("Select a saved location");
    if (savedLocations.isEmpty()) {
      savedLocationLabel.setEnabled(false);
      savedLocationSelect.setEnabled(false);
    }
    savedLocations.forEach(location -> savedLocationSelect.addItem(location.toString()));
  }

  private void exit() {
    dispose();
    System.exit(0);
  }

  private void updateButtons() {
    startButton.setEnabled(workspaceLocation.isPresent());
    locationFieldLabel.setEnabled(savedLocationSelect.getSelectedIndex() == 0);
    locationField.setEnabled(savedLocationSelect.getSelectedIndex() == 0);
    locationChooseButton.setEnabled(savedLocationSelect.getSelectedIndex() == 0);
    locationClearButton.setEnabled(savedLocationSelect.getSelectedIndex() == 0);
    savedLocationLabel.setEnabled(locationField.getText().isBlank());
    savedLocationSelect.setEnabled(locationField.getText().isBlank());
    locationClearButton.setVisible(workspaceLocation.isPresent() && !locationField.getText().isBlank());
    locationChooseButton.setVisible(!locationClearButton.isVisible());
  }

  public void open() {
    setSize(400, 300);
    setLocationRelativeTo(null);
    pack();
    setVisible(true);
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    contentPane = new JPanel();
    contentPane.setLayout(new GridBagLayout());
    mainPane = new JPanel();
    mainPane.setLayout(new GridBagLayout());
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    contentPane.add(mainPane, gbc);
    locationFieldLabel = new JLabel();
    locationFieldLabel.setText("Workspace location");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.anchor = GridBagConstraints.EAST;
    mainPane.add(locationFieldLabel, gbc);
    final JPanel spacer1 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainPane.add(spacer1, gbc);
    final JPanel spacer2 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.gridwidth = 4;
    gbc.fill = GridBagConstraints.VERTICAL;
    mainPane.add(spacer2, gbc);
    locationField = new JTextField();
    locationField.setEditable(false);
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 2;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainPane.add(locationField, gbc);
    final JSeparator separator1 = new JSeparator();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 4;
    gbc.gridwidth = 4;
    gbc.fill = GridBagConstraints.BOTH;
    mainPane.add(separator1, gbc);
    final JPanel spacer3 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 5;
    gbc.gridwidth = 4;
    gbc.fill = GridBagConstraints.VERTICAL;
    mainPane.add(spacer3, gbc);
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 6;
    gbc.gridwidth = 2;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainPane.add(savedLocationSelect, gbc);
    final JPanel spacer4 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 6;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    mainPane.add(spacer4, gbc);
    savedLocationLabel = new JLabel();
    savedLocationLabel.setText("Saved workspaces");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 6;
    gbc.anchor = GridBagConstraints.EAST;
    mainPane.add(savedLocationLabel, gbc);
    workspaceFieldActionsPane = new JPanel();
    workspaceFieldActionsPane.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.BOTH;
    mainPane.add(workspaceFieldActionsPane, gbc);
    locationChooseButton = new JButton();
    locationChooseButton.setText("Choose");
    workspaceFieldActionsPane.add(locationChooseButton);
    locationClearButton = new JButton();
    locationClearButton.setText("Clear");
    locationClearButton.setVisible(false);
    workspaceFieldActionsPane.add(locationClearButton);
    final JPanel spacer5 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.gridwidth = 4;
    gbc.fill = GridBagConstraints.VERTICAL;
    mainPane.add(spacer5, gbc);
    infoLabel = new JLabel();
    infoLabel.setText("<html>You can start Briefcase manually choosing a workspace location<br/>or by selecting one of the locations previously used:</html>");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.gridwidth = 4;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    mainPane.add(infoLabel, gbc);
    actionPane = new JPanel();
    actionPane.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.weightx = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    contentPane.add(actionPane, gbc);
    startButton = new JButton();
    startButton.setEnabled(false);
    startButton.setText("Start");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 3;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    actionPane.add(startButton, gbc);
    final JPanel spacer6 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 3;
    gbc.weightx = 1.0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    actionPane.add(spacer6, gbc);
    final JPanel spacer7 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.gridwidth = 3;
    gbc.fill = GridBagConstraints.VERTICAL;
    actionPane.add(spacer7, gbc);
    exitButton = new JButton();
    exitButton.setText("Exit");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    actionPane.add(exitButton, gbc);
    final JPanel spacer8 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.gridwidth = 3;
    gbc.fill = GridBagConstraints.VERTICAL;
    actionPane.add(spacer8, gbc);
    tipLabel = new JLabel();
    Font tipLabelFont = this.$$$getFont$$$(null, Font.PLAIN, -1, tipLabel.getFont());
    if (tipLabelFont != null) tipLabel.setFont(tipLabelFont);
    tipLabel.setText("Some tip");
    tipLabel.setVisible(false);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.gridwidth = 3;
    gbc.weightx = 1.0;
    actionPane.add(tipLabel, gbc);
    final JPanel spacer9 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 3;
    gbc.fill = GridBagConstraints.VERTICAL;
    contentPane.add(spacer9, gbc);
    final JPanel spacer10 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    contentPane.add(spacer10, gbc);
    final JPanel spacer11 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    contentPane.add(spacer11, gbc);
    final JPanel spacer12 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.VERTICAL;
    contentPane.add(spacer12, gbc);
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {resultName = currentFont.getName();} else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;} else {resultName = currentFont.getName();}
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }


  private void createUIComponents() {
    savedLocationSelect = new JComboBox<>();
  }
}
