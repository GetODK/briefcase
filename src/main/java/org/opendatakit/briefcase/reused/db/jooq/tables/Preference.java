/*
 * This file is generated by jOOQ.
 */
package org.opendatakit.briefcase.reused.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.opendatakit.briefcase.reused.db.jooq.Indexes;
import org.opendatakit.briefcase.reused.db.jooq.Keys;
import org.opendatakit.briefcase.reused.db.jooq.Public;
import org.opendatakit.briefcase.reused.db.jooq.tables.records.PreferenceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Preference extends TableImpl<PreferenceRecord> {

  private static final long serialVersionUID = 670593795;

  /**
   * The reference instance of <code>PUBLIC.PREFERENCE</code>
   */
  public static final Preference PREFERENCE = new Preference();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PreferenceRecord> getRecordType() {
    return PreferenceRecord.class;
  }

  /**
   * The column <code>PUBLIC.PREFERENCE.CATEGORY</code>.
   */
  public final TableField<PreferenceRecord, String> CATEGORY = createField("CATEGORY", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

  /**
   * The column <code>PUBLIC.PREFERENCE.NAME</code>.
   */
  public final TableField<PreferenceRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

  /**
   * The column <code>PUBLIC.PREFERENCE.VALUE</code>.
   */
  public final TableField<PreferenceRecord, String> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.VARCHAR(16777216), this, "");

  /**
   * Create a <code>PUBLIC.PREFERENCE</code> table reference
   */
  public Preference() {
    this(DSL.name("PREFERENCE"), null);
  }

  /**
   * Create an aliased <code>PUBLIC.PREFERENCE</code> table reference
   */
  public Preference(String alias) {
    this(DSL.name(alias), PREFERENCE);
  }

  /**
   * Create an aliased <code>PUBLIC.PREFERENCE</code> table reference
   */
  public Preference(Name alias) {
    this(alias, PREFERENCE);
  }

  private Preference(Name alias, Table<PreferenceRecord> aliased) {
    this(alias, aliased, null);
  }

  private Preference(Name alias, Table<PreferenceRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Preference(Table<O> child, ForeignKey<O, PreferenceRecord> key) {
    super(child, key, PREFERENCE);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.SYS_IDX_SYS_PK_10156_10157);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<PreferenceRecord> getPrimaryKey() {
    return Keys.SYS_PK_10156;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<PreferenceRecord>> getKeys() {
    return Arrays.<UniqueKey<PreferenceRecord>>asList(Keys.SYS_PK_10156);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Preference as(String alias) {
    return new Preference(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Preference as(Name alias) {
    return new Preference(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Preference rename(String name) {
    return new Preference(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Preference rename(Name name) {
    return new Preference(name, null);
  }
}
