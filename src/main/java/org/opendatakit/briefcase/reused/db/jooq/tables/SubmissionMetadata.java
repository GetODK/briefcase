/*
 * This file is generated by jOOQ.
 */
package org.opendatakit.briefcase.reused.db.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.opendatakit.briefcase.reused.db.jooq.Indexes;
import org.opendatakit.briefcase.reused.db.jooq.Keys;
import org.opendatakit.briefcase.reused.db.jooq.Public;
import org.opendatakit.briefcase.reused.db.jooq.tables.records.SubmissionMetadataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SubmissionMetadata extends TableImpl<SubmissionMetadataRecord> {

  private static final long serialVersionUID = -1403004702;

  /**
   * The reference instance of <code>PUBLIC.SUBMISSION_METADATA</code>
   */
  public static final SubmissionMetadata SUBMISSION_METADATA = new SubmissionMetadata();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<SubmissionMetadataRecord> getRecordType() {
    return SubmissionMetadataRecord.class;
  }

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.FORM_METADATA_ID</code>.
   */
  public final TableField<SubmissionMetadataRecord, Integer> FORM_METADATA_ID = createField("FORM_METADATA_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.INSTANCE_ID</code>.
   */
  public final TableField<SubmissionMetadataRecord, String> INSTANCE_ID = createField("INSTANCE_ID", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.SUBMISSION_FILE</code>.
   */
  public final TableField<SubmissionMetadataRecord, String> SUBMISSION_FILE = createField("SUBMISSION_FILE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.SUBMISSION_DATE</code>.
   */
  public final TableField<SubmissionMetadataRecord, OffsetDateTime> SUBMISSION_DATE = createField("SUBMISSION_DATE", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.ENCRYPTED_XML_FILE</code>.
   */
  public final TableField<SubmissionMetadataRecord, String> ENCRYPTED_XML_FILE = createField("ENCRYPTED_XML_FILE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.BASE_64_ENCRYPTED_KEY</code>.
   */
  public final TableField<SubmissionMetadataRecord, String> BASE_64_ENCRYPTED_KEY = createField("BASE_64_ENCRYPTED_KEY", org.jooq.impl.SQLDataType.CLOB, this, "");

  /**
   * The column <code>PUBLIC.SUBMISSION_METADATA.ENCRYPTED_SIGNATURE</code>.
   */
  public final TableField<SubmissionMetadataRecord, String> ENCRYPTED_SIGNATURE = createField("ENCRYPTED_SIGNATURE", org.jooq.impl.SQLDataType.CLOB, this, "");

  /**
   * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  @java.lang.Deprecated
  public final TableField<SubmissionMetadataRecord, Object> ATTACHMENT_FILENAMES = createField("ATTACHMENT_FILENAMES", org.jooq.impl.DefaultDataType.getDefaultDataType(""), this, "");

  /**
   * Create a <code>PUBLIC.SUBMISSION_METADATA</code> table reference
   */
  public SubmissionMetadata() {
    this(DSL.name("SUBMISSION_METADATA"), null);
  }

  /**
   * Create an aliased <code>PUBLIC.SUBMISSION_METADATA</code> table reference
   */
  public SubmissionMetadata(String alias) {
    this(DSL.name(alias), SUBMISSION_METADATA);
  }

  /**
   * Create an aliased <code>PUBLIC.SUBMISSION_METADATA</code> table reference
   */
  public SubmissionMetadata(Name alias) {
    this(alias, SUBMISSION_METADATA);
  }

  private SubmissionMetadata(Name alias, Table<SubmissionMetadataRecord> aliased) {
    this(alias, aliased, null);
  }

  private SubmissionMetadata(Name alias, Table<SubmissionMetadataRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> SubmissionMetadata(Table<O> child, ForeignKey<O, SubmissionMetadataRecord> key) {
    super(child, key, SUBMISSION_METADATA);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.SYS_IDX_SYS_PK_10145_10146);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<SubmissionMetadataRecord> getPrimaryKey() {
    return Keys.SYS_PK_10145;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<SubmissionMetadataRecord>> getKeys() {
    return Arrays.<UniqueKey<SubmissionMetadataRecord>>asList(Keys.SYS_PK_10145);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SubmissionMetadata as(String alias) {
    return new SubmissionMetadata(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SubmissionMetadata as(Name alias) {
    return new SubmissionMetadata(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public SubmissionMetadata rename(String name) {
    return new SubmissionMetadata(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public SubmissionMetadata rename(Name name) {
    return new SubmissionMetadata(name, null);
  }
}
