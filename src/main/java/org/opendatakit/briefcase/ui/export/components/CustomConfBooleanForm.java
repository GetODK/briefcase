package org.opendatakit.briefcase.ui.export.components;

import static org.opendatakit.briefcase.reused.TriStateBoolean.FALSE;
import static org.opendatakit.briefcase.reused.TriStateBoolean.TRUE;
import static org.opendatakit.briefcase.reused.TriStateBoolean.UNDETERMINED;

import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import org.opendatakit.briefcase.reused.TriStateBoolean;

@SuppressWarnings({"checkstyle:CommentsIndentation", "checkstyle:MethodName"})
public class CustomConfBooleanForm {
  private JPanel container;
  JRadioButton inherit;
  JRadioButton yes;
  JRadioButton no;
  private final List<Consumer<TriStateBoolean>> onChangeCallbacks = new ArrayList<>();
  private TriStateBoolean lastValue;

  CustomConfBooleanForm(Optional<TriStateBoolean> initialValue) {
    ButtonGroup buttonGroup = new ButtonGroup();
    buttonGroup.add(inherit);
    buttonGroup.add(yes);
    buttonGroup.add(no);

    switch (initialValue.orElse(UNDETERMINED)) {
      case UNDETERMINED:
        inherit.setSelected(true);
        break;
      case TRUE:
        yes.setSelected(true);
        break;
      case FALSE:
        no.setSelected(true);
        break;
      default:
        // This one is because checkstyle will complain about not having a default branch
        // I guess it prevents regression if we add new values to the enum, which wouldn't
        // make sense in the first place. If Java starts supporting pattern matching, we
        // can get rid of this.
        throw new IllegalArgumentException("Unsupported value " + initialValue);
    }

    inherit.addActionListener(__ -> setInternal(UNDETERMINED));
    yes.addActionListener(__ -> setInternal(TRUE));
    no.addActionListener(__ -> setInternal(FALSE));
  }

  /**
   * Lets third parties react on changes of the internal state of this component
   */
  public void onChange(Consumer<TriStateBoolean> callback) {
    onChangeCallbacks.add(callback);
  }

  /**
   * Sets the UI state of this component by selecting one of its three possible
   * states: UNDETERMINED, TRUE, or FALSE
   */
  public void set(TriStateBoolean value) {
    switch (value) {
      case UNDETERMINED:
        inherit.setSelected(true);
        break;
      case TRUE:
        yes.setSelected(true);
        break;
      case FALSE:
        no.setSelected(true);
        break;
      default:
        throw new IllegalArgumentException("Unsupported value " + value);
    }
    setInternal(value);
  }

  /**
   * Updates the internal state of this component by changing the last known value it held
   * and triggering downstream callbacks
   */
  private void setInternal(TriStateBoolean value) {
    if (lastValue != value) {
      lastValue = value;
      onChangeCallbacks.forEach(callback -> callback.accept(value));
    }
  }

  public void setVisible(boolean visible) {
    container.setVisible(visible);
  }

  public void setEnabled(boolean enabled) {
    container.setEnabled(enabled);
    inherit.setEnabled(enabled);
    yes.setEnabled(enabled);
    no.setEnabled(enabled);
  }

  /**
   * Returns the internal state of this component
   */
  public TriStateBoolean get() {
    return lastValue;
  }

  public JComponent getContainer() {
    return container;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    container = new JPanel();
    container.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
    inherit = new JRadioButton();
    inherit.setText("Inherit");
    container.add(inherit);
    yes = new JRadioButton();
    yes.setText("Yes");
    container.add(yes);
    no = new JRadioButton();
    no.setText("No");
    container.add(no);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return container;
  }
}
