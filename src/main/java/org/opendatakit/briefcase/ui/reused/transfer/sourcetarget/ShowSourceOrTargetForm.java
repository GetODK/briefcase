/*
 * Copyright (C) 2018 Nafundi
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.opendatakit.briefcase.ui.reused.transfer.sourcetarget;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import org.opendatakit.briefcase.ui.reused.transfer.sourcetarget.source.PullSource;
import org.opendatakit.briefcase.ui.reused.transfer.sourcetarget.target.PushTarget;

@SuppressWarnings("checkstyle:MethodName")
public class ShowSourceOrTargetForm<T extends SourceOrTarget> extends JComponent {
  private final String action;
  public JPanel container;
  private JLabel sourceLabel;
  private JButton resetButton;
  private JLabel actionLabel;
  private JButton reloadButton;
  private List<Runnable> onResetCallbacks = new ArrayList<>();
  private List<Runnable> onReloadCallbacks = new ArrayList<>();
  private boolean showReloadButton;
  private boolean reloadTimerElapsed;
  private boolean reloadOperationCompleted;

  private ShowSourceOrTargetForm(String action, boolean showReloadButton) {
    $$$setupUI$$$();
    this.action = action;
    this.showReloadButton = showReloadButton;

    resetButton.addActionListener(__ -> onResetCallbacks.forEach(Runnable::run));
    reloadButton.addActionListener(__ -> onReloadCallbacks.forEach(Runnable::run));

    onReloadCallbacks.add(() -> {
      reloadButton.setEnabled(false);
      reloadTimerElapsed = false;
      reloadOperationCompleted = false;
      Timer t = new Timer(5000, (e) -> markReloadTimerElapsed());
      t.setRepeats(false);
      t.start();
    });
    if (!showReloadButton)
      reloadButton.setVisible(false);
  }

  static ShowSourceOrTargetForm<PullSource> pull() {
    return new ShowSourceOrTargetForm<>("Pulling from", true);
  }

  static ShowSourceOrTargetForm<PushTarget> push() {
    return new ShowSourceOrTargetForm<>("Pushing to", false);
  }

  void onReset(Runnable callback) {
    onResetCallbacks.add(callback);
  }

  void onReload(Runnable callback) {
    onReloadCallbacks.add(callback);
  }

  void showSelectedOption(T source) {
    actionLabel.setText(action + ": " + source.toString());
    source.decorate(sourceLabel);
    reloadButton.setVisible(source.canBeReloaded() && showReloadButton);
    markReloadOperationCompleted();
  }

  private void createUIComponents() {
    // TODO: place custom component creation code here
  }

  @Override
  public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    resetButton.setEnabled(enabled);
    reloadButton.setEnabled(enabled);
  }

  private void markReloadTimerElapsed() {
    reloadTimerElapsed = true;
    updateReloadButton();
  }

  private void markReloadOperationCompleted() {
    reloadOperationCompleted = true;
    updateReloadButton();
  }

  private void updateReloadButton() {
    if (reloadTimerElapsed && reloadOperationCompleted)
      reloadButton.setEnabled(true);
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    container = new JPanel();
    container.setLayout(new GridBagLayout());
    sourceLabel = new JLabel();
    sourceLabel.setText("Source info");
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    container.add(sourceLabel, gbc);
    actionLabel = new JLabel();
    actionLabel.setText("Action placeholder");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    container.add(actionLabel, gbc);
    resetButton = new JButton();
    resetButton.setText("Reset");
    gbc = new GridBagConstraints();
    gbc.gridx = 4;
    gbc.gridy = 0;
    gbc.gridheight = 2;
    gbc.anchor = GridBagConstraints.EAST;
    container.add(resetButton, gbc);
    final JPanel spacer1 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.gridheight = 2;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    container.add(spacer1, gbc);
    reloadButton = new JButton();
    reloadButton.setText("Reload");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.gridheight = 2;
    gbc.anchor = GridBagConstraints.EAST;
    container.add(reloadButton, gbc);
    final JPanel spacer2 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 0;
    gbc.gridheight = 2;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    container.add(spacer2, gbc);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return container;
  }

}
